@page "/checkout/shipping"

@using System.ComponentModel.DataAnnotations
@using EndPointEcommerce.WebStore.Api
@using EndPointEcommerce.WebStore.Identity
@using EndPointEcommerce.WebStore.State

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationState
@inject IApiClient ApiClient
@inject QuoteStateContainer QuoteState

<PageTitle>Shipping - End Point Ecommerce</PageTitle>

<section class="py-5">
    <div class="container px-4 px-lg-5 my-5">
        <h1>Checkout</h1>

        <EditForm Model="ShippingInput" method="post" OnSubmit="HandleOnSubmit">
            <ObjectGraphDataAnnotationsValidator />

            <div class="card mb-4 p-3">
                <h4 class="mb-3">Contact Information</h4>
                <div class="form-floating">
                    <InputText
                        @bind-Value="ShippingInput.Email"
                        id="ShippingInput.Email"
                        class="form-control"
                        placeholder="name@example.com"
                    />
                    <label for="ShippingInput.Email" class="form-label">Email</label>
                </div>
                <ValidationMessage For="() => ShippingInput.Email" class="text-danger" />
            </div>

            <div class="row">
                <div class="col">
                    <div class="card mb-4 p-3">
                        <h4 class="mb-3">Shipping Address</h4>
                        <AuthorizeView>
                            <Authorized Context="auth_context">
                                <AddressSelect
                                    Addresses="Addresses"
                                    OnAddressSelected="UseSelectedShippingAddress"
                                />
                            </Authorized>
                        </AuthorizeView>

                        <AddressForm Address="ShippingInput.ShippingAddress" States="States" />
                    </div>
                </div>
                <div class="col">
                    <div class="card mb-4 p-3">
                        <h4 class="mb-3">Billing Address</h4>

                        <div class="form-check">
                            <InputCheckbox
                                @bind-Value="ShippingInput.UseShippingAsBilling"
                                id="UseShippingAsBilling"
                                class="form-check-input"
                            />
                            <label class="form-check-label" for="UseShippingAsBilling">
                                Use shipping address
                            </label>
                        </div>

                        @if (!ShippingInput.UseShippingAsBilling)
                        {
                            <div class="mt-3"></div>

                            <AuthorizeView>
                                <Authorized Context="auth_context">
                                    <AddressSelect
                                        Addresses="Addresses"
                                        OnAddressSelected="UseSelectedBillingAddress"
                                    />
                                </Authorized>
                            </AuthorizeView>

                            <AddressForm Address="ShippingInput.BillingAddress" States="States" />
                        }
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-outline-dark">Proceed to Payment</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</section>

@code {
    private class ShippingInputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [ValidateComplexType]
        public Address ShippingAddress { get; set; } = new();

        [ValidateComplexType]
        public Address BillingAddress { get; set; } = new();

        public bool UseShippingAsBilling { get; set; } = true;
    }

    private List<State> States { get; set; } = new();

    private ShippingInputModel ShippingInput { get; set; } = new();

    private List<Address> Addresses = new();

    protected override async Task OnInitializedAsync()
    {
        States = await ApiClient.GetStates();

        await QuoteState.LoadQuote();

        if (QuoteState.IsQuoteEmpty)
        {
            Navigation.NavigateTo("/cart");
            return;
        }

        ShippingInput.Email = QuoteState.Quote?.Email ?? string.Empty;
        ShippingInput.ShippingAddress = QuoteState.Quote?.ShippingAddress?.Clone() ?? new();
        ShippingInput.BillingAddress = QuoteState.Quote?.BillingAddress?.Clone() ?? new();

        if (await AuthenticationState.IsUserAuthenticated())
        {
            Addresses = await ApiClient.GetAddresses();
        }
    }

    private void UseSelectedShippingAddress(int addressId)
    {
        var selectedAddress = Addresses.FirstOrDefault(a => a.Id == addressId);

        if (selectedAddress == null)
            ShippingInput.ShippingAddress = new();
        else
            ShippingInput.ShippingAddress = selectedAddress.Clone();
    }

    private void UseSelectedBillingAddress(int addressId)
    {
        var selectedAddress = Addresses.FirstOrDefault(a => a.Id == addressId);

        if (selectedAddress == null)
            ShippingInput.BillingAddress = new();
        else
            ShippingInput.BillingAddress = selectedAddress.Clone();
    }

    private async Task HandleOnSubmit(EditContext editContext)
    {
        if (ShippingInput.UseShippingAsBilling)
        {
            ShippingInput.BillingAddress = ShippingInput.ShippingAddress.Clone();
        }

        if (!editContext.Validate()) return;

        await ApiClient.PutQuote(
            ShippingInput.Email,
            ShippingInput.ShippingAddress,
            ShippingInput.BillingAddress
        );

        Navigation.NavigateTo("/checkout/payment");
    }
}