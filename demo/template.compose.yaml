x-logging: &default-logging
  options:
    max-size: 50m

services:
  admin-portal:
    image: $IMAGE_ADMINPORTAL_COMMIT
    restart: always
    ports:
      - 127.0.0.1:${ADMIN_PORTAL_PORT}:8080
    volumes:
      - admin-portal-data-protection-keys:/home/app/data-protection-keys
      - images:/home/app/images
    environment:
      - DOTNET_GCHighMemPercent=0x48 # 72%
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - AdminPortalDataProtectionKeysPath=/home/app/data-protection-keys/admin-portal
      - CategoryImagesPath=/home/app/images/category-images
      - ProductImagesPath=/home/app/images/product-images
      - TaxJarApiKey=${TAX_JAR_API_KEY}
      - TaxJarFromCountry=${TAX_JAR_FROM_COUNTRY}
      - TaxJarFromStreet=${TAX_JAR_FROM_STREET}
      - TaxJarFromCity=${TAX_JAR_FROM_CITY}
      - TaxJarFromState=${TAX_JAR_FROM_STATE}
      - TaxJarFromZip=${TAX_JAR_FROM_ZIP}
    secrets:
      - end-point-ecommerce-db-connection-string
    entrypoint: [
      "sh", "-c",
      "export ConnectionStrings__EndPointEcommerceDbContext=$(cat /run/secrets/end-point-ecommerce-db-connection-string) &&
      dotnet EndPointEcommerce.AdminPortal.dll"
    ]
    healthcheck:
      test: 'curl -f -LI http://localhost:8080/healthz'
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
    logging: *default-logging

  web-api:
    image: $IMAGE_WEBAPI_COMMIT
    restart: always
    ports:
      - 127.0.0.1:${WEB_API_PORT}:8080
    volumes:
      - web-api-data-protection-keys:/home/app/data-protection-keys
      - images:/home/app/images
    environment:
      - DOTNET_GCHighMemPercent=0x48 # 72%
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - WebApiDataProtectionKeysPath=/home/app/data-protection-keys/web-api
      - CategoryImagesPath=/home/app/images/category-images
      - ProductImagesPath=/home/app/images/product-images
      - AllowedOrigins=${WEB_API_ALLOWED_ORIGINS}
      - CategoryImagesUrl=${CATEGORY_IMAGES_URL}
      - ProductImagesUrl=${PRODUCT_IMAGES_URL}
      - ConfirmEmailUrl=${WEB_STORE_CONFIRM_EMAIL_URL}
      - PasswordResetUrl=${WEB_STORE_PASSWORD_RESET_URL}
      - OrderDetailsUrl=${WEB_STORE_ORDER_DETAILS_URL}
      - MailSettings__Server=${MAIL_SETTINGS_SERVER}
      - MailSettings__Port=${MAIL_SETTINGS_PORT}
      - MailSettings__SenderName=${MAIL_SETTINGS_SENDER_NAME}
      - MailSettings__SenderEmail=${MAIL_SETTINGS_SENDER_EMAIL}
      - MailSettings__UserName=${MAIL_SETTINGS_USER_NAME}
      - MailSettings__Password=${MAIL_SETTINGS_PASSWORD}
      - MailCcAddresses=${MAIL_CC_ADDRESSES}
      - MailBccAddresses=${MAIL_BCC_ADDRESSES}
      - TaxJarApiKey=${TAX_JAR_API_KEY}
      - TaxJarFromCountry=${TAX_JAR_FROM_COUNTRY}
      - TaxJarFromStreet=${TAX_JAR_FROM_STREET}
      - TaxJarFromCity=${TAX_JAR_FROM_CITY}
      - TaxJarFromState=${TAX_JAR_FROM_STATE}
      - TaxJarFromZip=${TAX_JAR_FROM_ZIP}
      - AuthNetEnvironment=${AUTH_NET_ENVIRONMENT}
      - AuthNetLoginId=${AUTH_NET_LOGIN_ID}
      - AuthNetTransactionKey=${AUTH_NET_TRANSACTION_KEY}
      - SwaggerForceEnable=${SWAGGER_FORCE_ENABLE:-false}
    secrets:
      - end-point-ecommerce-db-connection-string
    entrypoint: [
      "sh", "-c",
      "export ConnectionStrings__EndPointEcommerceDbContext=$(cat /run/secrets/end-point-ecommerce-db-connection-string) &&
      dotnet EndPointEcommerce.WebApi.dll"
    ]
    healthcheck:
      test: 'curl -f -LI http://localhost:8080/healthz'
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
    logging: *default-logging

  web-store:
    image: $IMAGE_WEBSTORE_COMMIT
    restart: always
    ports:
      - 127.0.0.1:${WEB_STORE_PORT}:80
    environment:
      - EndPointEcommerceApiUrl=${WEB_API_URL}
      - AuthNetEnvironment=${AUTH_NET_ENVIRONMENT}
      - AuthNetLoginId=${AUTH_NET_LOGIN_ID}
      - AuthNetClientKey=${AUTH_NET_CLIENT_KEY}
    depends_on:
      web-api:
        condition: service_healthy
    logging: *default-logging

  db:
    image: $IMAGE_DB_COMMIT
    restart: always
    ports:
      - 127.0.0.1:${DB_PORT}:5432
    volumes:
      - db-postgres-data:/var/lib/postgresql/data
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-db-password
      - END_POINT_ECOMMERCE_DB=${END_POINT_ECOMMERCE_DB}
      - END_POINT_ECOMMERCE_DB_USERNAME=${END_POINT_ECOMMERCE_DB_USERNAME}
      - END_POINT_ECOMMERCE_DB_PASSWORD_FILE=/run/secrets/end-point-ecommerce-db-password
    secrets:
      - postgres-db-password
      - end-point-ecommerce-db-password
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging

  maintenance:
    image: $IMAGE_MAINTENANCE_COMMIT
    init: true
    volumes:
      - images:/home/app/images
    secrets:
      - end-point-ecommerce-db-connection-string
    command: sleep infinity

volumes:
  db-postgres-data:
  admin-portal-data-protection-keys:
  web-api-data-protection-keys:
  images:

secrets:
  postgres-db-password:
    file: ./secrets/postgres-db-password.txt
  end-point-ecommerce-db-password:
    file: ./secrets/end-point-ecommerce-db-password.txt
  end-point-ecommerce-db-connection-string:
    file: ./secrets/end-point-ecommerce-db-connection-string.txt
